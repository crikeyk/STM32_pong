
pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003208  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001538  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d4  080048d4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048dc  080048dc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080048e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  2000002c  08004910  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08004910  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000861c  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001847  00000000  00000000  00028678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  00029ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d9f  00000000  00000000  0002aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9cd  00000000  00000000  00040c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085408  00000000  00000000  0004b62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0a34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d4  00000000  00000000  000d0a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003384 	.word	0x08003384

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08003384 	.word	0x08003384

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <blink_multi>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void blink_multi(int repeat, int delay)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, LED_OFF);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	4812      	ldr	r0, [pc, #72]	; (8000544 <blink_multi+0x5c>)
 80004fa:	f001 fce3 	bl	8001ec4 <HAL_GPIO_WritePin>

	for(int i = 0;i<repeat;i++){
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e016      	b.n	8000532 <blink_multi+0x4a>
		HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, LED_ON);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	480e      	ldr	r0, [pc, #56]	; (8000544 <blink_multi+0x5c>)
 800050c:	f001 fcda 	bl	8001ec4 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fa30 	bl	8001978 <HAL_Delay>
		HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, LED_OFF);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <blink_multi+0x5c>)
 8000520:	f001 fcd0 	bl	8001ec4 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fa26 	bl	8001978 <HAL_Delay>
	for(int i = 0;i<repeat;i++){
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	3301      	adds	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	dbe4      	blt.n	8000504 <blink_multi+0x1c>
	}

}
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40020800 	.word	0x40020800

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f001 f9a1 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f843 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8d9 	bl	800070c <MX_GPIO_Init>
  MX_I2C1_Init();
 800055a:	f000 f8a9 	bl	80006b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ballPos ball_x_local = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	80bb      	strh	r3, [r7, #4]
  ballPos ball_y_local = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	807b      	strh	r3, [r7, #2]
  bool game_over = FALSE;
 8000566:	2300      	movs	r3, #0
 8000568:	71fb      	strb	r3, [r7, #7]



  SSD1306_Init (); // initialize the display
 800056a:	f000 fbe5 	bl	8000d38 <SSD1306_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  reset_game();
 800056e:	f000 f9dd 	bl	800092c <reset_game>

	  game_over = FALSE;
 8000572:	2300      	movs	r3, #0
 8000574:	71fb      	strb	r3, [r7, #7]
//		  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, LED_ON);
//	  } else {
//		  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, LED_OFF);
//	  }

	  pong_start_screen();
 8000576:	f000 f94b 	bl	8000810 <pong_start_screen>
	  pong_wait_for_button_press();
 800057a:	f000 f9b1 	bl	80008e0 <pong_wait_for_button_press>
	  blink_multi(5, 20);
 800057e:	2114      	movs	r1, #20
 8000580:	2005      	movs	r0, #5
 8000582:	f7ff ffb1 	bl	80004e8 <blink_multi>

	  while(!game_over)
 8000586:	e024      	b.n	80005d2 <main+0x8a>
	  {
		  pong_move_paddle();
 8000588:	f000 f966 	bl	8000858 <pong_move_paddle>

		  if(pong_ball_at_paddle()){
 800058c:	f000 fb30 	bl	8000bf0 <pong_ball_at_paddle>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d00e      	beq.n	80005b4 <main+0x6c>
			  if(ball_in_paddle()){
 8000596:	f000 fb49 	bl	8000c2c <ball_in_paddle>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <main+0x5e>
				  bounce_off_paddle();
 80005a0:	f000 faee 	bl	8000b80 <bounce_off_paddle>
 80005a4:	e008      	b.n	80005b8 <main+0x70>
			  } else {
				  pong_game_over();
 80005a6:	f000 fa85 	bl	8000ab4 <pong_game_over>
				  pong_wait_for_button_press();
 80005aa:	f000 f999 	bl	80008e0 <pong_wait_for_button_press>
				  game_over = TRUE;
 80005ae:	2301      	movs	r3, #1
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e001      	b.n	80005b8 <main+0x70>
			  }
		  } else {
			  pong_update_ball_pos();
 80005b4:	f000 f9e0 	bl	8000978 <pong_update_ball_pos>
		  }


		  ball_x_local = get_ball_x();
 80005b8:	f000 fba6 	bl	8000d08 <get_ball_x>
 80005bc:	4603      	mov	r3, r0
 80005be:	80bb      	strh	r3, [r7, #4]
		  ball_y_local = get_ball_y();
 80005c0:	f000 fbae 	bl	8000d20 <get_ball_y>
 80005c4:	4603      	mov	r3, r0
 80005c6:	807b      	strh	r3, [r7, #2]

		  if(!game_over)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <main+0x8a>
		  {
			  pong_display_frame();
 80005ce:	f000 fb6b 	bl	8000ca8 <pong_display_frame>
	  while(!game_over)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0d7      	beq.n	8000588 <main+0x40>
	  reset_game();
 80005d8:	e7c9      	b.n	800056e <main+0x26>
	...

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fe80 	bl	80032f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <SystemClock_Config+0xd0>)
 800062a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000650:	2319      	movs	r3, #25
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000654:	23a8      	movs	r3, #168	; 0xa8
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f002 f9c1 	bl	80029ec <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000670:	f000 f8c8 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2102      	movs	r1, #2
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fc23 	bl	8002edc <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800069c:	f000 f8b2 	bl	8000804 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_I2C1_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C1_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_I2C1_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ee:	f001 fc03 	bl	8001ef8 <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f884 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000048 	.word	0x20000048
 8000704:	40005400 	.word	0x40005400
 8000708:	00061a80 	.word	0x00061a80

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <MX_GPIO_Init+0xec>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xec>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_GPIO_Init+0xec>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_GPIO_Init+0xf0>)
 800079a:	f001 fb93 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <MX_GPIO_Init+0xf0>)
 80007b8:	f001 f9e8 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT0_Pin */
  GPIO_InitStruct.Pin = BUT0_Pin;
 80007bc:	2301      	movs	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT0_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_GPIO_Init+0xf4>)
 80007d0:	f001 f9dc 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80007d4:	2302      	movs	r3, #2
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_GPIO_Init+0xf4>)
 80007ea:	f001 f9cf 	bl	8001b8c <HAL_GPIO_Init>

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020400 	.word	0x40020400

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <pong_start_screen>:

uint16_t num_bounces = 0;


void pong_start_screen(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fb77 	bl	8000f08 <SSD1306_Fill>
SSD1306_GotoXY (40, 20);
 800081a:	2114      	movs	r1, #20
 800081c:	2028      	movs	r0, #40	; 0x28
 800081e:	f000 fbeb 	bl	8000ff8 <SSD1306_GotoXY>
SSD1306_Puts ("PONG", &Font_11x18, SSD1306_COLOR_WHITE);
 8000822:	2201      	movs	r2, #1
 8000824:	4908      	ldr	r1, [pc, #32]	; (8000848 <pong_start_screen+0x38>)
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <pong_start_screen+0x3c>)
 8000828:	f000 fc7c 	bl	8001124 <SSD1306_Puts>

SSD1306_GotoXY (15, 50);
 800082c:	2132      	movs	r1, #50	; 0x32
 800082e:	200f      	movs	r0, #15
 8000830:	f000 fbe2 	bl	8000ff8 <SSD1306_GotoXY>
SSD1306_Puts ("Press to start", &Font_7x10, SSD1306_COLOR_WHITE);
 8000834:	2201      	movs	r2, #1
 8000836:	4906      	ldr	r1, [pc, #24]	; (8000850 <pong_start_screen+0x40>)
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <pong_start_screen+0x44>)
 800083a:	f000 fc73 	bl	8001124 <SSD1306_Puts>

SSD1306_UpdateScreen();
 800083e:	f000 fb3f 	bl	8000ec0 <SSD1306_UpdateScreen>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	0800339c 	.word	0x0800339c
 8000850:	20000000 	.word	0x20000000
 8000854:	080033a4 	.word	0x080033a4

08000858 <pong_move_paddle>:

void pong_move_paddle(void)
{
 8000858:	b5b0      	push	{r4, r5, r7, lr}
 800085a:	af00      	add	r7, sp, #0

	paddle_pos = paddle_pos + paddle_speed *(BUTTON_RIGHT - BUTTON_LEFT);
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <pong_move_paddle+0x78>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b29c      	uxth	r4, r3
 8000862:	2102      	movs	r1, #2
 8000864:	481b      	ldr	r0, [pc, #108]	; (80008d4 <pong_move_paddle+0x7c>)
 8000866:	f001 fb15 	bl	8001e94 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	461d      	mov	r5, r3
 800086e:	2101      	movs	r1, #1
 8000870:	4818      	ldr	r0, [pc, #96]	; (80008d4 <pong_move_paddle+0x7c>)
 8000872:	f001 fb0f 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	1aeb      	subs	r3, r5, r3
 800087a:	b29b      	uxth	r3, r3
 800087c:	fb14 f303 	smulbb	r3, r4, r3
 8000880:	b29a      	uxth	r2, r3
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <pong_move_paddle+0x80>)
 8000884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000888:	b29b      	uxth	r3, r3
 800088a:	4413      	add	r3, r2
 800088c:	b29b      	uxth	r3, r3
 800088e:	b21a      	sxth	r2, r3
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <pong_move_paddle+0x80>)
 8000892:	801a      	strh	r2, [r3, #0]

	  if(paddle_pos < 0){
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <pong_move_paddle+0x80>)
 8000896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089a:	2b00      	cmp	r3, #0
 800089c:	da03      	bge.n	80008a6 <pong_move_paddle+0x4e>
		  paddle_pos = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <pong_move_paddle+0x80>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	801a      	strh	r2, [r3, #0]
	  } else if (paddle_pos > SSD1306_WIDTH - paddle_width - 1){
		  paddle_pos = SSD1306_WIDTH - paddle_width - 1;
	  }

}
 80008a4:	e012      	b.n	80008cc <pong_move_paddle+0x74>
	  } else if (paddle_pos > SSD1306_WIDTH - paddle_width - 1){
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <pong_move_paddle+0x80>)
 80008a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <pong_move_paddle+0x84>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80008b6:	429a      	cmp	r2, r3
 80008b8:	dd08      	ble.n	80008cc <pong_move_paddle+0x74>
		  paddle_pos = SSD1306_WIDTH - paddle_width - 1;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <pong_move_paddle+0x84>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	b21a      	sxth	r2, r3
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <pong_move_paddle+0x80>)
 80008ca:	801a      	strh	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	bdb0      	pop	{r4, r5, r7, pc}
 80008d0:	20000014 	.word	0x20000014
 80008d4:	40020400 	.word	0x40020400
 80008d8:	20000010 	.word	0x20000010
 80008dc:	20000012 	.word	0x20000012

080008e0 <pong_wait_for_button_press>:

void pong_wait_for_button_press(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	while(BUTTON_LEFT == 0 && BUTTON_RIGHT == 0)
 80008e4:	bf00      	nop
 80008e6:	2101      	movs	r1, #1
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <pong_wait_for_button_press+0x48>)
 80008ea:	f001 fad3 	bl	8001e94 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d106      	bne.n	8000902 <pong_wait_for_button_press+0x22>
 80008f4:	2102      	movs	r1, #2
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <pong_wait_for_button_press+0x48>)
 80008f8:	f001 facc 	bl	8001e94 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f1      	beq.n	80008e6 <pong_wait_for_button_press+0x6>
	{
	}

	while(BUTTON_LEFT == 1 || BUTTON_RIGHT == 1)
 8000902:	bf00      	nop
 8000904:	2101      	movs	r1, #1
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <pong_wait_for_button_press+0x48>)
 8000908:	f001 fac4 	bl	8001e94 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	d0f8      	beq.n	8000904 <pong_wait_for_button_press+0x24>
 8000912:	2102      	movs	r1, #2
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <pong_wait_for_button_press+0x48>)
 8000916:	f001 fabd 	bl	8001e94 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	d0f1      	beq.n	8000904 <pong_wait_for_button_press+0x24>
	{
	}
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40020400 	.word	0x40020400

0800092c <reset_game>:

void reset_game(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	paddle_pos = 30;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <reset_game+0x34>)
 8000932:	221e      	movs	r2, #30
 8000934:	801a      	strh	r2, [r3, #0]

	ball_x = 20;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <reset_game+0x38>)
 8000938:	2214      	movs	r2, #20
 800093a:	801a      	strh	r2, [r3, #0]
	ball_y = 20;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <reset_game+0x3c>)
 800093e:	2214      	movs	r2, #20
 8000940:	801a      	strh	r2, [r3, #0]

	vel_x = 1;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <reset_game+0x40>)
 8000944:	2201      	movs	r2, #1
 8000946:	801a      	strh	r2, [r3, #0]
	vel_y = -2;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <reset_game+0x44>)
 800094a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800094e:	801a      	strh	r2, [r3, #0]

	num_bounces = 0;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <reset_game+0x48>)
 8000952:	2200      	movs	r2, #0
 8000954:	801a      	strh	r2, [r3, #0]

}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20000010 	.word	0x20000010
 8000964:	20000016 	.word	0x20000016
 8000968:	20000018 	.word	0x20000018
 800096c:	2000001a 	.word	0x2000001a
 8000970:	2000001c 	.word	0x2000001c
 8000974:	2000009c 	.word	0x2000009c

08000978 <pong_update_ball_pos>:


void pong_update_ball_pos(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	ball_x += vel_x;
 800097c:	4b48      	ldr	r3, [pc, #288]	; (8000aa0 <pong_update_ball_pos+0x128>)
 800097e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000982:	b29a      	uxth	r2, r3
 8000984:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <pong_update_ball_pos+0x12c>)
 8000986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4413      	add	r3, r2
 800098e:	b29b      	uxth	r3, r3
 8000990:	b21a      	sxth	r2, r3
 8000992:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <pong_update_ball_pos+0x128>)
 8000994:	801a      	strh	r2, [r3, #0]
	ball_y += vel_y;
 8000996:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <pong_update_ball_pos+0x130>)
 8000998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <pong_update_ball_pos+0x134>)
 80009a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	4413      	add	r3, r2
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <pong_update_ball_pos+0x130>)
 80009ae:	801a      	strh	r2, [r3, #0]

	if(ball_x < ball_radius && vel_x < 0){
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <pong_update_ball_pos+0x128>)
 80009b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <pong_update_ball_pos+0x138>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	da1c      	bge.n	80009fa <pong_update_ball_pos+0x82>
 80009c0:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <pong_update_ball_pos+0x12c>)
 80009c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	da17      	bge.n	80009fa <pong_update_ball_pos+0x82>
		ball_x = 2*ball_radius -ball_x;
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <pong_update_ball_pos+0x138>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <pong_update_ball_pos+0x128>)
 80009d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <pong_update_ball_pos+0x128>)
 80009e4:	801a      	strh	r2, [r3, #0]
		vel_x = -vel_x;
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <pong_update_ball_pos+0x12c>)
 80009e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	425b      	negs	r3, r3
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <pong_update_ball_pos+0x12c>)
 80009f6:	801a      	strh	r2, [r3, #0]
 80009f8:	e028      	b.n	8000a4c <pong_update_ball_pos+0xd4>
	} else if (ball_x > SSD1306_WIDTH-ball_radius-1 && vel_x > 0){
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <pong_update_ball_pos+0x128>)
 80009fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <pong_update_ball_pos+0x138>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dd1e      	ble.n	8000a4c <pong_update_ball_pos+0xd4>
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <pong_update_ball_pos+0x12c>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dd19      	ble.n	8000a4c <pong_update_ball_pos+0xd4>
		ball_x = 2*SSD1306_WIDTH - ball_x - 2*ball_radius ;
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <pong_update_ball_pos+0x138>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <pong_update_ball_pos+0x128>)
 8000a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	b21a      	sxth	r2, r3
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <pong_update_ball_pos+0x128>)
 8000a38:	801a      	strh	r2, [r3, #0]
		vel_x = -vel_x;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <pong_update_ball_pos+0x12c>)
 8000a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	425b      	negs	r3, r3
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	b21a      	sxth	r2, r3
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <pong_update_ball_pos+0x12c>)
 8000a4a:	801a      	strh	r2, [r3, #0]
	}

	if(ball_y < ball_radius && vel_y < 0){
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <pong_update_ball_pos+0x130>)
 8000a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <pong_update_ball_pos+0x138>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	da1b      	bge.n	8000a94 <pong_update_ball_pos+0x11c>
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <pong_update_ball_pos+0x134>)
 8000a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	da16      	bge.n	8000a94 <pong_update_ball_pos+0x11c>
		ball_y = 2*ball_radius -ball_y;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <pong_update_ball_pos+0x138>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <pong_update_ball_pos+0x130>)
 8000a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <pong_update_ball_pos+0x130>)
 8000a80:	801a      	strh	r2, [r3, #0]
		vel_y = -vel_y;
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <pong_update_ball_pos+0x134>)
 8000a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <pong_update_ball_pos+0x134>)
 8000a92:	801a      	strh	r2, [r3, #0]
//	else if (ball_y > SSD1306_HEIGHT-ball_radius-1  && vel_y > 0){
//		ball_y= 2*SSD1306_HEIGHT - ball_y - 2*ball_radius-2;
//		vel_y = -vel_y;
//	}

}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000016 	.word	0x20000016
 8000aa4:	2000001a 	.word	0x2000001a
 8000aa8:	20000018 	.word	0x20000018
 8000aac:	2000001c 	.word	0x2000001c
 8000ab0:	2000001e 	.word	0x2000001e

08000ab4 <pong_game_over>:

void pong_game_over(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af02      	add	r7, sp, #8
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 fa24 	bl	8000f08 <SSD1306_Fill>
	SSD1306_DrawFilledRectangle((uint8_t) paddle_pos, SSD1306_HEIGHT-2, 10, 1, SSD1306_COLOR_WHITE);
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <pong_game_over+0xa8>)
 8000ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	2301      	movs	r3, #1
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	213e      	movs	r1, #62	; 0x3e
 8000ad4:	f000 fc46 	bl	8001364 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawFilledCircle((uint8_t)ball_x, (uint8_t)ball_y, ball_radius, SSD1306_COLOR_WHITE);
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <pong_game_over+0xac>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	b218      	sxth	r0, r3
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <pong_game_over+0xb0>)
 8000ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	b219      	sxth	r1, r3
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <pong_game_over+0xb4>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	2301      	movs	r3, #1
 8000af4:	f000 fc83 	bl	80013fe <SSD1306_DrawFilledCircle>
	SSD1306_GotoXY (20, 20);
 8000af8:	2114      	movs	r1, #20
 8000afa:	2014      	movs	r0, #20
 8000afc:	f000 fa7c 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts ("GAME OVER", &Font_11x18, SSD1306_COLOR_WHITE);
 8000b00:	2201      	movs	r2, #1
 8000b02:	491a      	ldr	r1, [pc, #104]	; (8000b6c <pong_game_over+0xb8>)
 8000b04:	481a      	ldr	r0, [pc, #104]	; (8000b70 <pong_game_over+0xbc>)
 8000b06:	f000 fb0d 	bl	8001124 <SSD1306_Puts>

	char score[20];
	itoa(num_bounces, score, 10);
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <pong_game_over+0xc0>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	220a      	movs	r2, #10
 8000b14:	4619      	mov	r1, r3
 8000b16:	f002 fbe9 	bl	80032ec <itoa>

	SSD1306_GotoXY (30, 40);
 8000b1a:	2128      	movs	r1, #40	; 0x28
 8000b1c:	201e      	movs	r0, #30
 8000b1e:	f000 fa6b 	bl	8000ff8 <SSD1306_GotoXY>
	SSD1306_Puts (strcat(score, " bounces"), &Font_7x10, SSD1306_COLOR_WHITE);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb55 	bl	80001d4 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4413      	add	r3, r2
 8000b32:	4911      	ldr	r1, [pc, #68]	; (8000b78 <pong_game_over+0xc4>)
 8000b34:	461a      	mov	r2, r3
 8000b36:	460b      	mov	r3, r1
 8000b38:	cb03      	ldmia	r3!, {r0, r1}
 8000b3a:	6010      	str	r0, [r2, #0]
 8000b3c:	6051      	str	r1, [r2, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	7213      	strb	r3, [r2, #8]
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2201      	movs	r2, #1
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <pong_game_over+0xc8>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 faeb 	bl	8001124 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8000b4e:	f000 f9b7 	bl	8000ec0 <SSD1306_UpdateScreen>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000010 	.word	0x20000010
 8000b60:	20000016 	.word	0x20000016
 8000b64:	20000018 	.word	0x20000018
 8000b68:	2000001e 	.word	0x2000001e
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	080033b4 	.word	0x080033b4
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	080033c0 	.word	0x080033c0
 8000b7c:	20000000 	.word	0x20000000

08000b80 <bounce_off_paddle>:

void bounce_off_paddle(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	ball_y= 2*SSD1306_HEIGHT - ball_y - 2*ball_radius-2 - 2*paddle_height;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <bounce_off_paddle+0x5c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <bounce_off_paddle+0x60>)
 8000b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4413      	add	r3, r2
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <bounce_off_paddle+0x64>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <bounce_off_paddle+0x60>)
 8000bb2:	801a      	strh	r2, [r3, #0]
	vel_y = -vel_y;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <bounce_off_paddle+0x68>)
 8000bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <bounce_off_paddle+0x68>)
 8000bc4:	801a      	strh	r2, [r3, #0]
	num_bounces += 1;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <bounce_off_paddle+0x6c>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <bounce_off_paddle+0x6c>)
 8000bd0:	801a      	strh	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	2000001e 	.word	0x2000001e
 8000be0:	20000018 	.word	0x20000018
 8000be4:	20000013 	.word	0x20000013
 8000be8:	2000001c 	.word	0x2000001c
 8000bec:	2000009c 	.word	0x2000009c

08000bf0 <pong_ball_at_paddle>:

bool pong_ball_at_paddle(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	if(ball_y + vel_y > SSD1306_HEIGHT - 1 - paddle_height){
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <pong_ball_at_paddle+0x30>)
 8000bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <pong_ball_at_paddle+0x34>)
 8000bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c02:	441a      	add	r2, r3
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <pong_ball_at_paddle+0x38>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dd01      	ble.n	8000c14 <pong_ball_at_paddle+0x24>
		return TRUE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <pong_ball_at_paddle+0x26>
	} else {
		return FALSE;
 8000c14:	2300      	movs	r3, #0
	}
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000018 	.word	0x20000018
 8000c24:	2000001c 	.word	0x2000001c
 8000c28:	20000013 	.word	0x20000013

08000c2c <ball_in_paddle>:

bool ball_in_paddle(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

	ballPos next_frame_x = ball_x + vel_x/2;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <ball_in_paddle+0x68>)
 8000c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c38:	0fda      	lsrs	r2, r3, #31
 8000c3a:	4413      	add	r3, r2
 8000c3c:	105b      	asrs	r3, r3, #1
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <ball_in_paddle+0x6c>)
 8000c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	80fb      	strh	r3, [r7, #6]
	if(next_frame_x > paddle_pos - ball_radius && next_frame_x < paddle_pos + paddle_width + ball_radius){
 8000c50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <ball_in_paddle+0x70>)
 8000c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <ball_in_paddle+0x74>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dd0f      	ble.n	8000c86 <ball_in_paddle+0x5a>
 8000c66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <ball_in_paddle+0x70>)
 8000c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c70:	4619      	mov	r1, r3
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <ball_in_paddle+0x78>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	440b      	add	r3, r1
 8000c78:	4909      	ldr	r1, [pc, #36]	; (8000ca0 <ball_in_paddle+0x74>)
 8000c7a:	7809      	ldrb	r1, [r1, #0]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	da01      	bge.n	8000c86 <ball_in_paddle+0x5a>
		return TRUE;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <ball_in_paddle+0x5c>
	} else {
		return FALSE;
 8000c86:	2300      	movs	r3, #0
	}
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	2000001a 	.word	0x2000001a
 8000c98:	20000016 	.word	0x20000016
 8000c9c:	20000010 	.word	0x20000010
 8000ca0:	2000001e 	.word	0x2000001e
 8000ca4:	20000012 	.word	0x20000012

08000ca8 <pong_display_frame>:


void pong_display_frame(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af02      	add	r7, sp, #8
	char buffer[20];

	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f92a 	bl	8000f08 <SSD1306_Fill>
	SSD1306_DrawFilledRectangle((uint8_t) paddle_pos, SSD1306_HEIGHT-2, 10, 1, SSD1306_COLOR_WHITE);
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <pong_display_frame+0x50>)
 8000cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	b298      	uxth	r0, r3
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	213e      	movs	r1, #62	; 0x3e
 8000cc8:	f000 fb4c 	bl	8001364 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawFilledCircle((uint8_t)ball_x, (uint8_t)ball_y, ball_radius, SSD1306_COLOR_WHITE);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <pong_display_frame+0x54>)
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	b218      	sxth	r0, r3
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <pong_display_frame+0x58>)
 8000cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	b219      	sxth	r1, r3
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <pong_display_frame+0x5c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f000 fb89 	bl	80013fe <SSD1306_DrawFilledCircle>
//	SSD1306_GotoXY (2, 2);
//	SSD1306_Puts (itoa(paddle_pos, buffer, 10), &Font_11x18, SSD1306_COLOR_WHITE);

	SSD1306_UpdateScreen();
 8000cec:	f000 f8e8 	bl	8000ec0 <SSD1306_UpdateScreen>
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	20000016 	.word	0x20000016
 8000d00:	20000018 	.word	0x20000018
 8000d04:	2000001e 	.word	0x2000001e

08000d08 <get_ball_x>:

ballPos get_ball_x(void){
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	return ball_x;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <get_ball_x+0x14>)
 8000d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000016 	.word	0x20000016

08000d20 <get_ball_y>:

ballPos get_ball_y(void){
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	return ball_y;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <get_ball_y+0x14>)
 8000d26:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	20000018 	.word	0x20000018

08000d38 <SSD1306_Init>:
    }
}



uint8_t SSD1306_Init(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000d3e:	f000 fc39 	bl	80015b4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d42:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d46:	2201      	movs	r2, #1
 8000d48:	2178      	movs	r1, #120	; 0x78
 8000d4a:	485b      	ldr	r0, [pc, #364]	; (8000eb8 <SSD1306_Init+0x180>)
 8000d4c:	f001 fb16 	bl	800237c <HAL_I2C_IsDeviceReady>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e0a9      	b.n	8000eae <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000d5a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000d5e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d60:	e002      	b.n	8000d68 <SSD1306_Init+0x30>
		p--;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f9      	bne.n	8000d62 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d6e:	22ae      	movs	r2, #174	; 0xae
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 fc9a 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	; 0x78
 8000d7e:	f000 fc95 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d82:	2210      	movs	r2, #16
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	; 0x78
 8000d88:	f000 fc90 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d8c:	22b0      	movs	r2, #176	; 0xb0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2078      	movs	r0, #120	; 0x78
 8000d92:	f000 fc8b 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC0); //Set COM Output Scan Direction  C8/C0 UP/DOWN
 8000d96:	22c0      	movs	r2, #192	; 0xc0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	; 0x78
 8000d9c:	f000 fc86 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	2078      	movs	r0, #120	; 0x78
 8000da6:	f000 fc81 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000daa:	2210      	movs	r2, #16
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	; 0x78
 8000db0:	f000 fc7c 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000db4:	2240      	movs	r2, #64	; 0x40
 8000db6:	2100      	movs	r1, #0
 8000db8:	2078      	movs	r0, #120	; 0x78
 8000dba:	f000 fc77 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000dbe:	2281      	movs	r2, #129	; 0x81
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	; 0x78
 8000dc4:	f000 fc72 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2078      	movs	r0, #120	; 0x78
 8000dce:	f000 fc6d 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA0); //--set segment re-map 0 to 127   A0 A1 LEFT/RIGHT
 8000dd2:	22a0      	movs	r2, #160	; 0xa0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	; 0x78
 8000dd8:	f000 fc68 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ddc:	22a6      	movs	r2, #166	; 0xa6
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	; 0x78
 8000de2:	f000 fc63 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000de6:	22a8      	movs	r2, #168	; 0xa8
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	; 0x78
 8000dec:	f000 fc5e 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000df0:	223f      	movs	r2, #63	; 0x3f
 8000df2:	2100      	movs	r1, #0
 8000df4:	2078      	movs	r0, #120	; 0x78
 8000df6:	f000 fc59 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dfa:	22a4      	movs	r2, #164	; 0xa4
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	; 0x78
 8000e00:	f000 fc54 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000e04:	22d3      	movs	r2, #211	; 0xd3
 8000e06:	2100      	movs	r1, #0
 8000e08:	2078      	movs	r0, #120	; 0x78
 8000e0a:	f000 fc4f 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	; 0x78
 8000e14:	f000 fc4a 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e18:	22d5      	movs	r2, #213	; 0xd5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2078      	movs	r0, #120	; 0x78
 8000e1e:	f000 fc45 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000e22:	22f0      	movs	r2, #240	; 0xf0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	; 0x78
 8000e28:	f000 fc40 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000e2c:	22d9      	movs	r2, #217	; 0xd9
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2078      	movs	r0, #120	; 0x78
 8000e32:	f000 fc3b 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000e36:	2222      	movs	r2, #34	; 0x22
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	; 0x78
 8000e3c:	f000 fc36 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e40:	22da      	movs	r2, #218	; 0xda
 8000e42:	2100      	movs	r1, #0
 8000e44:	2078      	movs	r0, #120	; 0x78
 8000e46:	f000 fc31 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	; 0x78
 8000e50:	f000 fc2c 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e54:	22db      	movs	r2, #219	; 0xdb
 8000e56:	2100      	movs	r1, #0
 8000e58:	2078      	movs	r0, #120	; 0x78
 8000e5a:	f000 fc27 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e5e:	2220      	movs	r2, #32
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	; 0x78
 8000e64:	f000 fc22 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000e68:	228d      	movs	r2, #141	; 0x8d
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2078      	movs	r0, #120	; 0x78
 8000e6e:	f000 fc1d 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e72:	2214      	movs	r2, #20
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	; 0x78
 8000e78:	f000 fc18 	bl	80016ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e7c:	22af      	movs	r2, #175	; 0xaf
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2078      	movs	r0, #120	; 0x78
 8000e82:	f000 fc13 	bl	80016ac <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e86:	222e      	movs	r2, #46	; 0x2e
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2078      	movs	r0, #120	; 0x78
 8000e8c:	f000 fc0e 	bl	80016ac <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f839 	bl	8000f08 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000e96:	f000 f813 	bl	8000ec0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <SSD1306_Init+0x184>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <SSD1306_Init+0x184>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SSD1306_Init+0x184>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000048 	.word	0x20000048
 8000ebc:	200004a0 	.word	0x200004a0

08000ec0 <SSD1306_UpdateScreen>:
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
	}
}

void SSD1306_UpdateScreen() {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e013      	b.n	8000ef4 <SSD1306_UpdateScreen+0x34>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	3b50      	subs	r3, #80	; 0x50
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2078      	movs	r0, #120	; 0x78
 8000ed8:	f000 fbe8 	bl	80016ac <ssd1306_I2C_Write>
//		SSD1306_WRITECOMMAND(0x00);
//		SSD1306_WRITECOMMAND(0x10);

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	01db      	lsls	r3, r3, #7
 8000ee0:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <SSD1306_UpdateScreen+0x44>)
 8000ee2:	441a      	add	r2, r3
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	2078      	movs	r0, #120	; 0x78
 8000eea:	f000 fb79 	bl	80015e0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	d9e8      	bls.n	8000ecc <SSD1306_UpdateScreen+0xc>
	}
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000a0 	.word	0x200000a0

08000f08 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <SSD1306_Fill+0x14>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e000      	b.n	8000f1e <SSD1306_Fill+0x16>
 8000f1c:	23ff      	movs	r3, #255	; 0xff
 8000f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f22:	4619      	mov	r1, r3
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <SSD1306_Fill+0x2c>)
 8000f26:	f002 f9e3 	bl	80032f0 <memset>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000a0 	.word	0x200000a0

08000f38 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	460b      	mov	r3, r1
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	70fb      	strb	r3, [r7, #3]
	if (
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f4e:	d848      	bhi.n	8000fe2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	2b3f      	cmp	r3, #63	; 0x3f
 8000f54:	d845      	bhi.n	8000fe2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <SSD1306_DrawPixel+0xb8>)
 8000f58:	791b      	ldrb	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf0c      	ite	eq
 8000f64:	2301      	moveq	r3, #1
 8000f66:	2300      	movne	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d11a      	bne.n	8000fa8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	b298      	uxth	r0, r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	01db      	lsls	r3, r3, #7
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <SSD1306_DrawPixel+0xbc>)
 8000f82:	5cd3      	ldrb	r3, [r2, r3]
 8000f84:	b25a      	sxtb	r2, r3
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b259      	sxtb	r1, r3
 8000f98:	88fa      	ldrh	r2, [r7, #6]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	01db      	lsls	r3, r3, #7
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2c9      	uxtb	r1, r1
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <SSD1306_DrawPixel+0xbc>)
 8000fa4:	54d1      	strb	r1, [r2, r3]
 8000fa6:	e01d      	b.n	8000fe4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000fa8:	88fa      	ldrh	r2, [r7, #6]
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	b298      	uxth	r0, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	01db      	lsls	r3, r3, #7
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <SSD1306_DrawPixel+0xbc>)
 8000fb8:	5cd3      	ldrb	r3, [r2, r3]
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	4013      	ands	r3, r2
 8000fd0:	b259      	sxtb	r1, r3
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	01db      	lsls	r3, r3, #7
 8000fd8:	4413      	add	r3, r2
 8000fda:	b2c9      	uxtb	r1, r1
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <SSD1306_DrawPixel+0xbc>)
 8000fde:	54d1      	strb	r1, [r2, r3]
 8000fe0:	e000      	b.n	8000fe4 <SSD1306_DrawPixel+0xac>
		return;
 8000fe2:	bf00      	nop
	}
}
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200004a0 	.word	0x200004a0
 8000ff4:	200000a0 	.word	0x200000a0

08000ff8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	80fb      	strh	r3, [r7, #6]
 8001004:	4613      	mov	r3, r2
 8001006:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SSD1306_GotoXY+0x28>)
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <SSD1306_GotoXY+0x28>)
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	8053      	strh	r3, [r2, #2]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	200004a0 	.word	0x200004a0

08001024 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <SSD1306_Putc+0xfc>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
	if (
 8001040:	2b7f      	cmp	r3, #127	; 0x7f
 8001042:	dc07      	bgt.n	8001054 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <SSD1306_Putc+0xfc>)
 8001046:	885b      	ldrh	r3, [r3, #2]
 8001048:	461a      	mov	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001050:	2b3f      	cmp	r3, #63	; 0x3f
 8001052:	dd01      	ble.n	8001058 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001054:	2300      	movs	r3, #0
 8001056:	e05e      	b.n	8001116 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e04b      	b.n	80010f6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	3b20      	subs	r3, #32
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	7849      	ldrb	r1, [r1, #1]
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	4619      	mov	r1, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	440b      	add	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e030      	b.n	80010e4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <SSD1306_Putc+0xfc>)
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4413      	add	r3, r2
 800109c:	b298      	uxth	r0, r3
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <SSD1306_Putc+0xfc>)
 80010a0:	885a      	ldrh	r2, [r3, #2]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	79ba      	ldrb	r2, [r7, #6]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff ff43 	bl	8000f38 <SSD1306_DrawPixel>
 80010b2:	e014      	b.n	80010de <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <SSD1306_Putc+0xfc>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4413      	add	r3, r2
 80010be:	b298      	uxth	r0, r3
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <SSD1306_Putc+0xfc>)
 80010c2:	885a      	ldrh	r2, [r3, #2]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	b299      	uxth	r1, r3
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f7ff ff2d 	bl	8000f38 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	3301      	adds	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d3c8      	bcc.n	8001082 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	461a      	mov	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	4293      	cmp	r3, r2
 8001100:	d3ad      	bcc.n	800105e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <SSD1306_Putc+0xfc>)
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4413      	add	r3, r2
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <SSD1306_Putc+0xfc>)
 8001112:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001114:	79fb      	ldrb	r3, [r7, #7]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200004a0 	.word	0x200004a0

08001124 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	4613      	mov	r3, r2
 8001130:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001132:	e012      	b.n	800115a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff71 	bl	8001024 <SSD1306_Putc>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d002      	beq.n	8001154 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	e008      	b.n	8001166 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1e8      	bne.n	8001134 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	781b      	ldrb	r3, [r3, #0]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800116e:	b590      	push	{r4, r7, lr}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	4604      	mov	r4, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4611      	mov	r1, r2
 800117a:	461a      	mov	r2, r3
 800117c:	4623      	mov	r3, r4
 800117e:	80fb      	strh	r3, [r7, #6]
 8001180:	4603      	mov	r3, r0
 8001182:	80bb      	strh	r3, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	2b7f      	cmp	r3, #127	; 0x7f
 8001190:	d901      	bls.n	8001196 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001192:	237f      	movs	r3, #127	; 0x7f
 8001194:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	2b7f      	cmp	r3, #127	; 0x7f
 800119a:	d901      	bls.n	80011a0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800119c:	237f      	movs	r3, #127	; 0x7f
 800119e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	2b3f      	cmp	r3, #63	; 0x3f
 80011a4:	d901      	bls.n	80011aa <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80011a6:	233f      	movs	r3, #63	; 0x3f
 80011a8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80011aa:	883b      	ldrh	r3, [r7, #0]
 80011ac:	2b3f      	cmp	r3, #63	; 0x3f
 80011ae:	d901      	bls.n	80011b4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80011b0:	233f      	movs	r3, #63	; 0x3f
 80011b2:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80011b4:	88fa      	ldrh	r2, [r7, #6]
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d205      	bcs.n	80011c8 <SSD1306_DrawLine+0x5a>
 80011bc:	887a      	ldrh	r2, [r7, #2]
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	e004      	b.n	80011d2 <SSD1306_DrawLine+0x64>
 80011c8:	88fa      	ldrh	r2, [r7, #6]
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80011d4:	88ba      	ldrh	r2, [r7, #4]
 80011d6:	883b      	ldrh	r3, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d205      	bcs.n	80011e8 <SSD1306_DrawLine+0x7a>
 80011dc:	883a      	ldrh	r2, [r7, #0]
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	e004      	b.n	80011f2 <SSD1306_DrawLine+0x84>
 80011e8:	88ba      	ldrh	r2, [r7, #4]
 80011ea:	883b      	ldrh	r3, [r7, #0]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d201      	bcs.n	8001200 <SSD1306_DrawLine+0x92>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e001      	b.n	8001204 <SSD1306_DrawLine+0x96>
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001206:	88ba      	ldrh	r2, [r7, #4]
 8001208:	883b      	ldrh	r3, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d201      	bcs.n	8001212 <SSD1306_DrawLine+0xa4>
 800120e:	2301      	movs	r3, #1
 8001210:	e001      	b.n	8001216 <SSD1306_DrawLine+0xa8>
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001218:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800121c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	dd06      	ble.n	8001232 <SSD1306_DrawLine+0xc4>
 8001224:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001228:	0fda      	lsrs	r2, r3, #31
 800122a:	4413      	add	r3, r2
 800122c:	105b      	asrs	r3, r3, #1
 800122e:	b21b      	sxth	r3, r3
 8001230:	e006      	b.n	8001240 <SSD1306_DrawLine+0xd2>
 8001232:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001236:	0fda      	lsrs	r2, r3, #31
 8001238:	4413      	add	r3, r2
 800123a:	105b      	asrs	r3, r3, #1
 800123c:	425b      	negs	r3, r3
 800123e:	b21b      	sxth	r3, r3
 8001240:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001242:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d129      	bne.n	800129e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800124a:	883a      	ldrh	r2, [r7, #0]
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d205      	bcs.n	800125e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001252:	883b      	ldrh	r3, [r7, #0]
 8001254:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800125a:	893b      	ldrh	r3, [r7, #8]
 800125c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	429a      	cmp	r2, r3
 8001264:	d205      	bcs.n	8001272 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800126e:	893b      	ldrh	r3, [r7, #8]
 8001270:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	82bb      	strh	r3, [r7, #20]
 8001276:	e00c      	b.n	8001292 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001278:	8ab9      	ldrh	r1, [r7, #20]
 800127a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe59 	bl	8000f38 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001286:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800128a:	b29b      	uxth	r3, r3
 800128c:	3301      	adds	r3, #1
 800128e:	b29b      	uxth	r3, r3
 8001290:	82bb      	strh	r3, [r7, #20]
 8001292:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	dded      	ble.n	8001278 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 800129c:	e05f      	b.n	800135e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800129e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d129      	bne.n	80012fa <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80012a6:	883a      	ldrh	r2, [r7, #0]
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d205      	bcs.n	80012ba <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80012ae:	883b      	ldrh	r3, [r7, #0]
 80012b0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80012b2:	88bb      	ldrh	r3, [r7, #4]
 80012b4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80012b6:	893b      	ldrh	r3, [r7, #8]
 80012b8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d205      	bcs.n	80012ce <SSD1306_DrawLine+0x160>
			tmp = x1;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80012ca:	893b      	ldrh	r3, [r7, #8]
 80012cc:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	82bb      	strh	r3, [r7, #20]
 80012d2:	e00c      	b.n	80012ee <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80012d4:	8abb      	ldrh	r3, [r7, #20]
 80012d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80012da:	88b9      	ldrh	r1, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe2b 	bl	8000f38 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80012e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3301      	adds	r3, #1
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	82bb      	strh	r3, [r7, #20]
 80012ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dded      	ble.n	80012d4 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80012f8:	e031      	b.n	800135e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80012fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80012fe:	88b9      	ldrh	r1, [r7, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe18 	bl	8000f38 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001308:	88fa      	ldrh	r2, [r7, #6]
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	429a      	cmp	r2, r3
 800130e:	d103      	bne.n	8001318 <SSD1306_DrawLine+0x1aa>
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d021      	beq.n	800135c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001318:	8afb      	ldrh	r3, [r7, #22]
 800131a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800131c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001320:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001324:	425b      	negs	r3, r3
 8001326:	429a      	cmp	r2, r3
 8001328:	dd08      	ble.n	800133c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800132a:	8afa      	ldrh	r2, [r7, #22]
 800132c:	8a3b      	ldrh	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001334:	89fa      	ldrh	r2, [r7, #14]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4413      	add	r3, r2
 800133a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800133c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	dad8      	bge.n	80012fa <SSD1306_DrawLine+0x18c>
			err += dx;
 8001348:	8afa      	ldrh	r2, [r7, #22]
 800134a:	8a7b      	ldrh	r3, [r7, #18]
 800134c:	4413      	add	r3, r2
 800134e:	b29b      	uxth	r3, r3
 8001350:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001352:	89ba      	ldrh	r2, [r7, #12]
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800135a:	e7ce      	b.n	80012fa <SSD1306_DrawLine+0x18c>
			break;
 800135c:	bf00      	nop
		} 
	}
}
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}

08001364 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b087      	sub	sp, #28
 8001368:	af02      	add	r7, sp, #8
 800136a:	4604      	mov	r4, r0
 800136c:	4608      	mov	r0, r1
 800136e:	4611      	mov	r1, r2
 8001370:	461a      	mov	r2, r3
 8001372:	4623      	mov	r3, r4
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	4603      	mov	r3, r0
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]
 800137e:	4613      	mov	r3, r2
 8001380:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	2b7f      	cmp	r3, #127	; 0x7f
 8001386:	d836      	bhi.n	80013f6 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	2b3f      	cmp	r3, #63	; 0x3f
 800138c:	d833      	bhi.n	80013f6 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800138e:	88fa      	ldrh	r2, [r7, #6]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4413      	add	r3, r2
 8001394:	2b7f      	cmp	r3, #127	; 0x7f
 8001396:	dd03      	ble.n	80013a0 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800139e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80013a0:	88ba      	ldrh	r2, [r7, #4]
 80013a2:	883b      	ldrh	r3, [r7, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	2b3f      	cmp	r3, #63	; 0x3f
 80013a8:	dd03      	ble.n	80013b2 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80013b0:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	e018      	b.n	80013ea <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	b299      	uxth	r1, r3
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	4413      	add	r3, r2
 80013c8:	b29c      	uxth	r4, r3
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	88f8      	ldrh	r0, [r7, #6]
 80013d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4613      	mov	r3, r2
 80013de:	4622      	mov	r2, r4
 80013e0:	f7ff fec5 	bl	800116e <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	883a      	ldrh	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d2e1      	bcs.n	80013b8 <SSD1306_DrawFilledRectangle+0x54>
 80013f4:	e000      	b.n	80013f8 <SSD1306_DrawFilledRectangle+0x94>
		return;
 80013f6:	bf00      	nop
	}
}
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}

080013fe <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80013fe:	b590      	push	{r4, r7, lr}
 8001400:	b089      	sub	sp, #36	; 0x24
 8001402:	af02      	add	r7, sp, #8
 8001404:	4604      	mov	r4, r0
 8001406:	4608      	mov	r0, r1
 8001408:	4611      	mov	r1, r2
 800140a:	461a      	mov	r2, r3
 800140c:	4623      	mov	r3, r4
 800140e:	80fb      	strh	r3, [r7, #6]
 8001410:	4603      	mov	r3, r0
 8001412:	80bb      	strh	r3, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	f1c3 0301 	rsb	r3, r3, #1
 8001422:	b29b      	uxth	r3, r3
 8001424:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	461a      	mov	r2, r3
 800142e:	03d2      	lsls	r2, r2, #15
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	b29b      	uxth	r3, r3
 8001436:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001440:	88f8      	ldrh	r0, [r7, #6]
 8001442:	88ba      	ldrh	r2, [r7, #4]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4413      	add	r3, r2
 8001448:	b29b      	uxth	r3, r3
 800144a:	787a      	ldrb	r2, [r7, #1]
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fd73 	bl	8000f38 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001452:	88f8      	ldrh	r0, [r7, #6]
 8001454:	88ba      	ldrh	r2, [r7, #4]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	787a      	ldrb	r2, [r7, #1]
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fd6a 	bl	8000f38 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001464:	88fa      	ldrh	r2, [r7, #6]
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	88b9      	ldrh	r1, [r7, #4]
 800146e:	787a      	ldrb	r2, [r7, #1]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fd61 	bl	8000f38 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	88b9      	ldrh	r1, [r7, #4]
 8001480:	787a      	ldrb	r2, [r7, #1]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd58 	bl	8000f38 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001488:	88fa      	ldrh	r2, [r7, #6]
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	b298      	uxth	r0, r3
 8001490:	88b9      	ldrh	r1, [r7, #4]
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	4413      	add	r3, r2
 8001498:	b29a      	uxth	r2, r3
 800149a:	88bc      	ldrh	r4, [r7, #4]
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4623      	mov	r3, r4
 80014a2:	f7ff fe64 	bl	800116e <SSD1306_DrawLine>

    while (x < y) {
 80014a6:	e079      	b.n	800159c <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 80014a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0e      	blt.n	80014ce <SSD1306_DrawFilledCircle+0xd0>
            y--;
 80014b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3b01      	subs	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80014bc:	8a7b      	ldrh	r3, [r7, #18]
 80014be:	3302      	adds	r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80014c4:	8afa      	ldrh	r2, [r7, #22]
 80014c6:	8a7b      	ldrh	r3, [r7, #18]
 80014c8:	4413      	add	r3, r2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80014ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80014da:	8abb      	ldrh	r3, [r7, #20]
 80014dc:	3302      	adds	r3, #2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80014e2:	8afa      	ldrh	r2, [r7, #22]
 80014e4:	8abb      	ldrh	r3, [r7, #20]
 80014e6:	4413      	add	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	8a3b      	ldrh	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b298      	uxth	r0, r3
 80014f4:	88ba      	ldrh	r2, [r7, #4]
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	4413      	add	r3, r2
 80014fa:	b299      	uxth	r1, r3
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	8a3b      	ldrh	r3, [r7, #16]
 8001500:	4413      	add	r3, r2
 8001502:	b29c      	uxth	r4, r3
 8001504:	88ba      	ldrh	r2, [r7, #4]
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	4413      	add	r3, r2
 800150a:	b29a      	uxth	r2, r3
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	4622      	mov	r2, r4
 8001514:	f7ff fe2b 	bl	800116e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8001518:	88fa      	ldrh	r2, [r7, #6]
 800151a:	8a3b      	ldrh	r3, [r7, #16]
 800151c:	4413      	add	r3, r2
 800151e:	b298      	uxth	r0, r3
 8001520:	88ba      	ldrh	r2, [r7, #4]
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	b299      	uxth	r1, r3
 8001528:	88fa      	ldrh	r2, [r7, #6]
 800152a:	8a3b      	ldrh	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b29c      	uxth	r4, r3
 8001530:	88ba      	ldrh	r2, [r7, #4]
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b29a      	uxth	r2, r3
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	4622      	mov	r2, r4
 8001540:	f7ff fe15 	bl	800116e <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001544:	88fa      	ldrh	r2, [r7, #6]
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	4413      	add	r3, r2
 800154a:	b298      	uxth	r0, r3
 800154c:	88ba      	ldrh	r2, [r7, #4]
 800154e:	8a3b      	ldrh	r3, [r7, #16]
 8001550:	4413      	add	r3, r2
 8001552:	b299      	uxth	r1, r3
 8001554:	88fa      	ldrh	r2, [r7, #6]
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b29c      	uxth	r4, r3
 800155c:	88ba      	ldrh	r2, [r7, #4]
 800155e:	8a3b      	ldrh	r3, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	b29a      	uxth	r2, r3
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	4622      	mov	r2, r4
 800156c:	f7ff fdff 	bl	800116e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	4413      	add	r3, r2
 8001576:	b298      	uxth	r0, r3
 8001578:	88ba      	ldrh	r2, [r7, #4]
 800157a:	8a3b      	ldrh	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	b299      	uxth	r1, r3
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b29c      	uxth	r4, r3
 8001588:	88ba      	ldrh	r2, [r7, #4]
 800158a:	8a3b      	ldrh	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b29a      	uxth	r2, r3
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	4622      	mov	r2, r4
 8001598:	f7ff fde9 	bl	800116e <SSD1306_DrawLine>
    while (x < y) {
 800159c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80015a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f6ff af7f 	blt.w	80014a8 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}

080015b4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <ssd1306_I2C_Init+0x28>)
 80015bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015be:	e002      	b.n	80015c6 <ssd1306_I2C_Init+0x12>
		p--;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f9      	bne.n	80015c0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	0003d090 	.word	0x0003d090

080015e0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 80015e6:	af02      	add	r7, sp, #8
 80015e8:	4604      	mov	r4, r0
 80015ea:	4608      	mov	r0, r1
 80015ec:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80015f0:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 80015f4:	600a      	str	r2, [r1, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80015fc:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001600:	4622      	mov	r2, r4
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001608:	f2a3 430a 	subw	r3, r3, #1034	; 0x40a
 800160c:	4602      	mov	r2, r0
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001614:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001618:	460a      	mov	r2, r1
 800161a:	801a      	strh	r2, [r3, #0]
uint8_t dt[1030];
dt[0] = reg;
 800161c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001620:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001624:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001628:	f2a2 420a 	subw	r2, r2, #1034	; 0x40a
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	701a      	strb	r2, [r3, #0]
uint16_t i;
for(i = 0; i < count; i++){
 8001630:	2300      	movs	r3, #0
 8001632:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8001636:	e015      	b.n	8001664 <ssd1306_I2C_WriteMulti+0x84>
dt[i+1] = data[i];
 8001638:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800163c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001640:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	441a      	add	r2, r3
 8001648:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800164c:	3301      	adds	r3, #1
 800164e:	7811      	ldrb	r1, [r2, #0]
 8001650:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001654:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8001658:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++){
 800165a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800165e:	3301      	adds	r3, #1
 8001660:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8001664:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001668:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800166c:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3e0      	bcc.n	8001638 <ssd1306_I2C_WriteMulti+0x58>
}
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 50);
 8001676:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800167a:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b299      	uxth	r1, r3
 8001682:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001686:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	f107 0208 	add.w	r2, r7, #8
 8001694:	2032      	movs	r0, #50	; 0x32
 8001696:	9000      	str	r0, [sp, #0]
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <ssd1306_I2C_WriteMulti+0xc8>)
 800169a:	f000 fd71 	bl	8002180 <HAL_I2C_Master_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	f207 4714 	addw	r7, r7, #1044	; 0x414
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	20000048 	.word	0x20000048

080016ac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	460b      	mov	r3, r1
 80016b8:	71bb      	strb	r3, [r7, #6]
 80016ba:	4613      	mov	r3, r2
 80016bc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016c2:	797b      	ldrb	r3, [r7, #5]
 80016c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	b299      	uxth	r1, r3
 80016ca:	f107 020c 	add.w	r2, r7, #12
 80016ce:	230a      	movs	r3, #10
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2302      	movs	r3, #2
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <ssd1306_I2C_Write+0x38>)
 80016d6:	f000 fd53 	bl	8002180 <HAL_I2C_Master_Transmit>
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000048 	.word	0x20000048

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_MspInit+0x4c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <HAL_MspInit+0x4c>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x4c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x4c>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_I2C_MspInit+0x84>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12b      	bne.n	80017b2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_I2C_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_I2C_MspInit+0x88>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_I2C_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001776:	23c0      	movs	r3, #192	; 0xc0
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177e:	2301      	movs	r3, #1
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001786:	2304      	movs	r3, #4
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <HAL_I2C_MspInit+0x8c>)
 8001792:	f000 f9fb 	bl	8001b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_I2C_MspInit+0x88>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_I2C_MspInit+0x88>)
 80017a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_I2C_MspInit+0x88>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40005400 	.word	0x40005400
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020400 	.word	0x40020400

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 f890 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800185c:	4c0b      	ldr	r4, [pc, #44]	; (800188c <LoopFillZerobss+0x26>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800186a:	f7ff ffd7 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f001 fd01 	bl	8003274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7fe fe69 	bl	8000548 <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001878:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001884:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 8001888:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800188c:	200004ac 	.word	0x200004ac

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f931 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff ff0e 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f93b 	bl	8001b72 <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f911 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000020 	.word	0x20000020
 8001930:	20000028 	.word	0x20000028
 8001934:	20000024 	.word	0x20000024

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000028 	.word	0x20000028
 800195c:	200004a8 	.word	0x200004a8

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200004a8 	.word	0x200004a8

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000028 	.word	0x20000028

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff47 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff5c 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffb0 	bl	8001ae0 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e159      	b.n	8001e5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8148 	bne.w	8001e56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d130      	bne.n	8001c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d017      	beq.n	8001c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a2 	beq.w	8001e56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_GPIO_Init+0x2ec>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <HAL_GPIO_Init+0x2f0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x202>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a48      	ldr	r2, [pc, #288]	; (8001e80 <HAL_GPIO_Init+0x2f4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x1fe>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_GPIO_Init+0x2f8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x1fa>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a46      	ldr	r2, [pc, #280]	; (8001e88 <HAL_GPIO_Init+0x2fc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x1f6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a45      	ldr	r2, [pc, #276]	; (8001e8c <HAL_GPIO_Init+0x300>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x1f2>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e008      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	f002 0203 	and.w	r2, r2, #3
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da0:	4935      	ldr	r1, [pc, #212]	; (8001e78 <HAL_GPIO_Init+0x2ec>)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_GPIO_Init+0x304>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd2:	4a2f      	ldr	r2, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x304>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_GPIO_Init+0x304>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dfc:	4a24      	ldr	r2, [pc, #144]	; (8001e90 <HAL_GPIO_Init+0x304>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_GPIO_Init+0x304>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e26:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x304>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_GPIO_Init+0x304>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e50:	4a0f      	ldr	r2, [pc, #60]	; (8001e90 <HAL_GPIO_Init+0x304>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	f67f aea2 	bls.w	8001ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e12b      	b.n	8002162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fc0a 	bl	8001738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2224      	movs	r2, #36	; 0x24
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f5c:	f001 f976 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 8001f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a81      	ldr	r2, [pc, #516]	; (800216c <HAL_I2C_Init+0x274>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d807      	bhi.n	8001f7c <HAL_I2C_Init+0x84>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a80      	ldr	r2, [pc, #512]	; (8002170 <HAL_I2C_Init+0x278>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	bf94      	ite	ls
 8001f74:	2301      	movls	r3, #1
 8001f76:	2300      	movhi	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	e006      	b.n	8001f8a <HAL_I2C_Init+0x92>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a7d      	ldr	r2, [pc, #500]	; (8002174 <HAL_I2C_Init+0x27c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bf94      	ite	ls
 8001f84:	2301      	movls	r3, #1
 8001f86:	2300      	movhi	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0e7      	b.n	8002162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a78      	ldr	r2, [pc, #480]	; (8002178 <HAL_I2C_Init+0x280>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0c9b      	lsrs	r3, r3, #18
 8001f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a6a      	ldr	r2, [pc, #424]	; (800216c <HAL_I2C_Init+0x274>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d802      	bhi.n	8001fcc <HAL_I2C_Init+0xd4>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	e009      	b.n	8001fe0 <HAL_I2C_Init+0xe8>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_I2C_Init+0x284>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	3301      	adds	r3, #1
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	495c      	ldr	r1, [pc, #368]	; (800216c <HAL_I2C_Init+0x274>)
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	d819      	bhi.n	8002034 <HAL_I2C_Init+0x13c>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e59      	subs	r1, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fbb1 f3f3 	udiv	r3, r1, r3
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002014:	400b      	ands	r3, r1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_I2C_Init+0x138>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e59      	subs	r1, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fbb1 f3f3 	udiv	r3, r1, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	e051      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 8002030:	2304      	movs	r3, #4
 8002032:	e04f      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d111      	bne.n	8002060 <HAL_I2C_Init+0x168>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e58      	subs	r0, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	440b      	add	r3, r1
 800204a:	fbb0 f3f3 	udiv	r3, r0, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e012      	b.n	8002086 <HAL_I2C_Init+0x18e>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	0099      	lsls	r1, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	fbb0 f3f3 	udiv	r3, r0, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Init+0x196>
 800208a:	2301      	movs	r3, #1
 800208c:	e022      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10e      	bne.n	80020b4 <HAL_I2C_Init+0x1bc>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1e58      	subs	r0, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	440b      	add	r3, r1
 80020a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b2:	e00f      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1e58      	subs	r0, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	0099      	lsls	r1, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	6809      	ldr	r1, [r1, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6911      	ldr	r1, [r2, #16]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68d2      	ldr	r2, [r2, #12]
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	000186a0 	.word	0x000186a0
 8002170:	001e847f 	.word	0x001e847f
 8002174:	003d08ff 	.word	0x003d08ff
 8002178:	431bde83 	.word	0x431bde83
 800217c:	10624dd3 	.word	0x10624dd3

08002180 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	461a      	mov	r2, r3
 800218c:	460b      	mov	r3, r1
 800218e:	817b      	strh	r3, [r7, #10]
 8002190:	4613      	mov	r3, r2
 8002192:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff fbe4 	bl	8001960 <HAL_GetTick>
 8002198:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	f040 80e0 	bne.w	8002368 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2319      	movs	r3, #25
 80021ae:	2201      	movs	r2, #1
 80021b0:	4970      	ldr	r1, [pc, #448]	; (8002374 <HAL_I2C_Master_Transmit+0x1f4>)
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fa92 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021be:	2302      	movs	r3, #2
 80021c0:	e0d3      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_I2C_Master_Transmit+0x50>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0cc      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ea>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d007      	beq.n	80021f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002204:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2221      	movs	r2, #33	; 0x21
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2210      	movs	r2, #16
 8002212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	893a      	ldrh	r2, [r7, #8]
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a50      	ldr	r2, [pc, #320]	; (8002378 <HAL_I2C_Master_Transmit+0x1f8>)
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002238:	8979      	ldrh	r1, [r7, #10]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f9ca 	bl	80025d8 <I2C_MasterRequestWrite>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e08d      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002264:	e066      	b.n	8002334 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	6a39      	ldr	r1, [r7, #32]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fb0c 	bl	8002888 <I2C_WaitOnTXEFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00d      	beq.n	8002292 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b04      	cmp	r3, #4
 800227c:	d107      	bne.n	800228e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06b      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	781a      	ldrb	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d11b      	bne.n	8002308 <HAL_I2C_Master_Transmit+0x188>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d017      	beq.n	8002308 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	6a39      	ldr	r1, [r7, #32]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fafc 	bl	800290a <I2C_WaitOnBTFFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2b04      	cmp	r3, #4
 800231e:	d107      	bne.n	8002330 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e01a      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	d194      	bne.n	8002266 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	00100002 	.word	0x00100002
 8002378:	ffff0000 	.word	0xffff0000

0800237c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	460b      	mov	r3, r1
 800238a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff fae8 	bl	8001960 <HAL_GetTick>
 8002390:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	f040 8111 	bne.w	80025c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2319      	movs	r3, #25
 80023aa:	2201      	movs	r2, #1
 80023ac:	4988      	ldr	r1, [pc, #544]	; (80025d0 <HAL_I2C_IsDeviceReady+0x254>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f994 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	e104      	b.n	80025c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_I2C_IsDeviceReady+0x50>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e0fd      	b.n	80025c8 <HAL_I2C_IsDeviceReady+0x24c>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d007      	beq.n	80023f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002400:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2224      	movs	r2, #36	; 0x24
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a70      	ldr	r2, [pc, #448]	; (80025d4 <HAL_I2C_IsDeviceReady+0x258>)
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002424:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f952 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244c:	d103      	bne.n	8002456 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0b6      	b.n	80025c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002468:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff fa79 	bl	8001960 <HAL_GetTick>
 800246e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800249e:	e025      	b.n	80024ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024a0:	f7ff fa5e 	bl	8001960 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d302      	bcc.n	80024b6 <HAL_I2C_IsDeviceReady+0x13a>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	22a0      	movs	r2, #160	; 0xa0
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2ba0      	cmp	r3, #160	; 0xa0
 80024f6:	d005      	beq.n	8002504 <HAL_I2C_IsDeviceReady+0x188>
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_I2C_IsDeviceReady+0x188>
 80024fe:	7dbb      	ldrb	r3, [r7, #22]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0cd      	beq.n	80024a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d129      	bne.n	800256e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002528:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2319      	movs	r3, #25
 8002546:	2201      	movs	r2, #1
 8002548:	4921      	ldr	r1, [pc, #132]	; (80025d0 <HAL_I2C_IsDeviceReady+0x254>)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f8c6 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e036      	b.n	80025c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e02c      	b.n	80025c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002586:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2319      	movs	r3, #25
 800258e:	2201      	movs	r2, #1
 8002590:	490f      	ldr	r1, [pc, #60]	; (80025d0 <HAL_I2C_IsDeviceReady+0x254>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f8a2 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e012      	b.n	80025c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	3301      	adds	r3, #1
 80025a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f4ff af32 	bcc.w	8002416 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	00100002 	.word	0x00100002
 80025d4:	ffff0000 	.word	0xffff0000

080025d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	460b      	mov	r3, r1
 80025e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d006      	beq.n	8002602 <I2C_MasterRequestWrite+0x2a>
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d003      	beq.n	8002602 <I2C_MasterRequestWrite+0x2a>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002600:	d108      	bne.n	8002614 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e00b      	b.n	800262c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	2b12      	cmp	r3, #18
 800261a:	d107      	bne.n	800262c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f84f 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002652:	d103      	bne.n	800265c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e035      	b.n	80026cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002668:	d108      	bne.n	800267c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800266a:	897b      	ldrh	r3, [r7, #10]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	e01b      	b.n	80026b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800267c:	897b      	ldrh	r3, [r7, #10]
 800267e:	11db      	asrs	r3, r3, #7
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 0306 	and.w	r3, r3, #6
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f063 030f 	orn	r3, r3, #15
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <I2C_MasterRequestWrite+0xfc>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f875 	bl	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e010      	b.n	80026cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <I2C_MasterRequestWrite+0x100>)
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f865 	bl	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	00010008 	.word	0x00010008
 80026d8:	00010002 	.word	0x00010002

080026dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ec:	e025      	b.n	800273a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d021      	beq.n	800273a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7ff f933 	bl	8001960 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e023      	b.n	8002782 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10d      	bne.n	8002760 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4013      	ands	r3, r2
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	e00c      	b.n	800277a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4013      	ands	r3, r2
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	429a      	cmp	r2, r3
 800277e:	d0b6      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002798:	e051      	b.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a8:	d123      	bne.n	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f043 0204 	orr.w	r2, r3, #4
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e046      	b.n	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d021      	beq.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fa:	f7ff f8b1 	bl	8001960 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	429a      	cmp	r2, r3
 8002808:	d302      	bcc.n	8002810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d116      	bne.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f043 0220 	orr.w	r2, r3, #32
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e020      	b.n	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d10c      	bne.n	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4013      	ands	r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	bf14      	ite	ne
 800285a:	2301      	movne	r3, #1
 800285c:	2300      	moveq	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	e00b      	b.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	43da      	mvns	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d18d      	bne.n	800279a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002894:	e02d      	b.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f878 	bl	800298c <I2C_IsAcknowledgeFailed>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e02d      	b.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d021      	beq.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7ff f857 	bl	8001960 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d116      	bne.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e007      	b.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d1ca      	bne.n	8002896 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002916:	e02d      	b.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f837 	bl	800298c <I2C_IsAcknowledgeFailed>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e02d      	b.n	8002984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d021      	beq.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002930:	f7ff f816 	bl	8001960 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	d302      	bcc.n	8002946 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e007      	b.n	8002984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b04      	cmp	r3, #4
 8002980:	d1ca      	bne.n	8002918 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a2:	d11b      	bne.n	80029dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0204 	orr.w	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e267      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d075      	beq.n	8002af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0a:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d00c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a16:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d112      	bne.n	8002a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a22:	4b82      	ldr	r3, [pc, #520]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2e:	d10b      	bne.n	8002a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d05b      	beq.n	8002af4 <HAL_RCC_OscConfig+0x108>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d157      	bne.n	8002af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e242      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x74>
 8002a52:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a75      	ldr	r2, [pc, #468]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e01d      	b.n	8002a9c <HAL_RCC_OscConfig+0xb0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x98>
 8002a6a:	4b70      	ldr	r3, [pc, #448]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6f      	ldr	r2, [pc, #444]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b6d      	ldr	r3, [pc, #436]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a6c      	ldr	r2, [pc, #432]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0xb0>
 8002a84:	4b69      	ldr	r3, [pc, #420]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a68      	ldr	r2, [pc, #416]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b66      	ldr	r3, [pc, #408]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a65      	ldr	r2, [pc, #404]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff5c 	bl	8001960 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe ff58 	bl	8001960 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e207      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0xc0>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe ff48 	bl	8001960 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe ff44 	bl	8001960 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1f3      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	4b51      	ldr	r3, [pc, #324]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xe8>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d063      	beq.n	8002bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b02:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d11c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1a:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_RCC_OscConfig+0x152>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1c7      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4937      	ldr	r1, [pc, #220]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	e03a      	b.n	8002bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5c:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCC_OscConfig+0x244>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fe fefd 	bl	8001960 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7fe fef9 	bl	8001960 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e1a8      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4925      	ldr	r1, [pc, #148]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCC_OscConfig+0x244>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fedc 	bl	8001960 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fe fed8 	bl	8001960 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e187      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d036      	beq.n	8002c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_RCC_OscConfig+0x248>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe febc 	bl	8001960 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe feb8 	bl	8001960 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e167      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_OscConfig+0x240>)
 8002c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x200>
 8002c0a:	e01b      	b.n	8002c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_RCC_OscConfig+0x248>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fea5 	bl	8001960 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	e00e      	b.n	8002c38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1a:	f7fe fea1 	bl	8001960 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d907      	bls.n	8002c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e150      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	42470000 	.word	0x42470000
 8002c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ea      	bne.n	8002c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8097 	beq.w	8002d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	4b7d      	ldr	r3, [pc, #500]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a7c      	ldr	r2, [pc, #496]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b7a      	ldr	r3, [pc, #488]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <HAL_RCC_OscConfig+0x474>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8e:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <HAL_RCC_OscConfig+0x474>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a73      	ldr	r2, [pc, #460]	; (8002e60 <HAL_RCC_OscConfig+0x474>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fe61 	bl	8001960 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca2:	f7fe fe5d 	bl	8001960 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e10c      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_RCC_OscConfig+0x474>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x2ea>
 8002cc8:	4b64      	ldr	r3, [pc, #400]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a63      	ldr	r2, [pc, #396]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd4:	e01c      	b.n	8002d10 <HAL_RCC_OscConfig+0x324>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x30c>
 8002cde:	4b5f      	ldr	r3, [pc, #380]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a5e      	ldr	r2, [pc, #376]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a5b      	ldr	r2, [pc, #364]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0x324>
 8002cf8:	4b58      	ldr	r3, [pc, #352]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a57      	ldr	r2, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
 8002d04:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f023 0304 	bic.w	r3, r3, #4
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d015      	beq.n	8002d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe fe22 	bl	8001960 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fe fe1e 	bl	8001960 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e0cb      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0ee      	beq.n	8002d20 <HAL_RCC_OscConfig+0x334>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d44:	f7fe fe0c 	bl	8001960 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fe08 	bl	8001960 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e0b5      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d62:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ee      	bne.n	8002d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	4a38      	ldr	r2, [pc, #224]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a1 	beq.w	8002ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d8a:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d05c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d141      	bne.n	8002e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9e:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <HAL_RCC_OscConfig+0x478>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fddc 	bl	8001960 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe fdd8 	bl	8001960 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e087      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	019b      	lsls	r3, r3, #6
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	3b01      	subs	r3, #1
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	491b      	ldr	r1, [pc, #108]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x478>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fdb1 	bl	8001960 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fdad 	bl	8001960 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e05c      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x416>
 8002e20:	e054      	b.n	8002ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_RCC_OscConfig+0x478>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fd9a 	bl	8001960 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fd96 	bl	8001960 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e045      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x470>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x444>
 8002e4e:	e03d      	b.n	8002ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e038      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x4ec>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d028      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d121      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d11a      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d111      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800

08002edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0cc      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b68      	ldr	r3, [pc, #416]	; (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d90c      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b65      	ldr	r3, [pc, #404]	; (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b63      	ldr	r3, [pc, #396]	; (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0b8      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d020      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f30:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a58      	ldr	r2, [pc, #352]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f48:	4b53      	ldr	r3, [pc, #332]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a52      	ldr	r2, [pc, #328]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	494d      	ldr	r1, [pc, #308]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d044      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d119      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e07f      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d003      	beq.n	8002f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06f      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e067      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4934      	ldr	r1, [pc, #208]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fcc:	f7fe fcc8 	bl	8001960 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7fe fcc4 	bl	8001960 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e04f      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 020c 	and.w	r2, r3, #12
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d1eb      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d20c      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b22      	ldr	r3, [pc, #136]	; (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e032      	b.n	800308a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4916      	ldr	r1, [pc, #88]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	490e      	ldr	r1, [pc, #56]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003062:	f000 f821 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8003066:	4602      	mov	r2, r0
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	490a      	ldr	r1, [pc, #40]	; (800309c <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	5ccb      	ldrb	r3, [r1, r3]
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fc28 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023c00 	.word	0x40023c00
 8003098:	40023800 	.word	0x40023800
 800309c:	08004894 	.word	0x08004894
 80030a0:	20000020 	.word	0x20000020
 80030a4:	20000024 	.word	0x20000024

080030a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ac:	b090      	sub	sp, #64	; 0x40
 80030ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
 80030b4:	2300      	movs	r3, #0
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b8:	2300      	movs	r3, #0
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d00d      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x40>
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	f200 80a1 	bhi.w	8003214 <HAL_RCC_GetSysClockFreq+0x16c>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x34>
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030da:	e09b      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030dc:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_GetSysClockFreq+0x184>)
 80030de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030e0:	e09b      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_GetSysClockFreq+0x188>)
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030e6:	e098      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e8:	4b4f      	ldr	r3, [pc, #316]	; (8003228 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f2:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <HAL_RCC_GetSysClockFreq+0x180>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d028      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030fe:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <HAL_RCC_GetSysClockFreq+0x180>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	2200      	movs	r2, #0
 8003106:	623b      	str	r3, [r7, #32]
 8003108:	627a      	str	r2, [r7, #36]	; 0x24
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003110:	2100      	movs	r1, #0
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_GetSysClockFreq+0x188>)
 8003114:	fb03 f201 	mul.w	r2, r3, r1
 8003118:	2300      	movs	r3, #0
 800311a:	fb00 f303 	mul.w	r3, r0, r3
 800311e:	4413      	add	r3, r2
 8003120:	4a43      	ldr	r2, [pc, #268]	; (8003230 <HAL_RCC_GetSysClockFreq+0x188>)
 8003122:	fba0 1202 	umull	r1, r2, r0, r2
 8003126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003128:	460a      	mov	r2, r1
 800312a:	62ba      	str	r2, [r7, #40]	; 0x28
 800312c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312e:	4413      	add	r3, r2
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	2200      	movs	r2, #0
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	61fa      	str	r2, [r7, #28]
 800313a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800313e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003142:	f7fd f84f 	bl	80001e4 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4613      	mov	r3, r2
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314e:	e053      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003150:	4b35      	ldr	r3, [pc, #212]	; (8003228 <HAL_RCC_GetSysClockFreq+0x180>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	2200      	movs	r2, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	617a      	str	r2, [r7, #20]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003162:	f04f 0b00 	mov.w	fp, #0
 8003166:	4652      	mov	r2, sl
 8003168:	465b      	mov	r3, fp
 800316a:	f04f 0000 	mov.w	r0, #0
 800316e:	f04f 0100 	mov.w	r1, #0
 8003172:	0159      	lsls	r1, r3, #5
 8003174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003178:	0150      	lsls	r0, r2, #5
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	ebb2 080a 	subs.w	r8, r2, sl
 8003182:	eb63 090b 	sbc.w	r9, r3, fp
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003192:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003196:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800319a:	ebb2 0408 	subs.w	r4, r2, r8
 800319e:	eb63 0509 	sbc.w	r5, r3, r9
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	00eb      	lsls	r3, r5, #3
 80031ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b0:	00e2      	lsls	r2, r4, #3
 80031b2:	4614      	mov	r4, r2
 80031b4:	461d      	mov	r5, r3
 80031b6:	eb14 030a 	adds.w	r3, r4, sl
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	eb45 030b 	adc.w	r3, r5, fp
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ce:	4629      	mov	r1, r5
 80031d0:	028b      	lsls	r3, r1, #10
 80031d2:	4621      	mov	r1, r4
 80031d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d8:	4621      	mov	r1, r4
 80031da:	028a      	lsls	r2, r1, #10
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	2200      	movs	r2, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	60fa      	str	r2, [r7, #12]
 80031e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ec:	f7fc fffa 	bl	80001e4 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4613      	mov	r3, r2
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_GetSysClockFreq+0x180>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	3301      	adds	r3, #1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003212:	e002      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_RCC_GetSysClockFreq+0x184>)
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800321c:	4618      	mov	r0, r3
 800321e:	3740      	adds	r7, #64	; 0x40
 8003220:	46bd      	mov	sp, r7
 8003222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	00f42400 	.word	0x00f42400
 8003230:	017d7840 	.word	0x017d7840

08003234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_RCC_GetHCLKFreq+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000020 	.word	0x20000020

0800324c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003250:	f7ff fff0 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	0a9b      	lsrs	r3, r3, #10
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4903      	ldr	r1, [pc, #12]	; (8003270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	080048a4 	.word	0x080048a4

08003274 <__libc_init_array>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	4d0d      	ldr	r5, [pc, #52]	; (80032ac <__libc_init_array+0x38>)
 8003278:	4c0d      	ldr	r4, [pc, #52]	; (80032b0 <__libc_init_array+0x3c>)
 800327a:	1b64      	subs	r4, r4, r5
 800327c:	10a4      	asrs	r4, r4, #2
 800327e:	2600      	movs	r6, #0
 8003280:	42a6      	cmp	r6, r4
 8003282:	d109      	bne.n	8003298 <__libc_init_array+0x24>
 8003284:	4d0b      	ldr	r5, [pc, #44]	; (80032b4 <__libc_init_array+0x40>)
 8003286:	4c0c      	ldr	r4, [pc, #48]	; (80032b8 <__libc_init_array+0x44>)
 8003288:	f000 f87c 	bl	8003384 <_init>
 800328c:	1b64      	subs	r4, r4, r5
 800328e:	10a4      	asrs	r4, r4, #2
 8003290:	2600      	movs	r6, #0
 8003292:	42a6      	cmp	r6, r4
 8003294:	d105      	bne.n	80032a2 <__libc_init_array+0x2e>
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	f855 3b04 	ldr.w	r3, [r5], #4
 800329c:	4798      	blx	r3
 800329e:	3601      	adds	r6, #1
 80032a0:	e7ee      	b.n	8003280 <__libc_init_array+0xc>
 80032a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a6:	4798      	blx	r3
 80032a8:	3601      	adds	r6, #1
 80032aa:	e7f2      	b.n	8003292 <__libc_init_array+0x1e>
 80032ac:	080048dc 	.word	0x080048dc
 80032b0:	080048dc 	.word	0x080048dc
 80032b4:	080048dc 	.word	0x080048dc
 80032b8:	080048e0 	.word	0x080048e0

080032bc <__itoa>:
 80032bc:	1e93      	subs	r3, r2, #2
 80032be:	2b22      	cmp	r3, #34	; 0x22
 80032c0:	b510      	push	{r4, lr}
 80032c2:	460c      	mov	r4, r1
 80032c4:	d904      	bls.n	80032d0 <__itoa+0x14>
 80032c6:	2300      	movs	r3, #0
 80032c8:	700b      	strb	r3, [r1, #0]
 80032ca:	461c      	mov	r4, r3
 80032cc:	4620      	mov	r0, r4
 80032ce:	bd10      	pop	{r4, pc}
 80032d0:	2a0a      	cmp	r2, #10
 80032d2:	d109      	bne.n	80032e8 <__itoa+0x2c>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	da07      	bge.n	80032e8 <__itoa+0x2c>
 80032d8:	232d      	movs	r3, #45	; 0x2d
 80032da:	700b      	strb	r3, [r1, #0]
 80032dc:	4240      	negs	r0, r0
 80032de:	2101      	movs	r1, #1
 80032e0:	4421      	add	r1, r4
 80032e2:	f000 f80d 	bl	8003300 <__utoa>
 80032e6:	e7f1      	b.n	80032cc <__itoa+0x10>
 80032e8:	2100      	movs	r1, #0
 80032ea:	e7f9      	b.n	80032e0 <__itoa+0x24>

080032ec <itoa>:
 80032ec:	f7ff bfe6 	b.w	80032bc <__itoa>

080032f0 <memset>:
 80032f0:	4402      	add	r2, r0
 80032f2:	4603      	mov	r3, r0
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d100      	bne.n	80032fa <memset+0xa>
 80032f8:	4770      	bx	lr
 80032fa:	f803 1b01 	strb.w	r1, [r3], #1
 80032fe:	e7f9      	b.n	80032f4 <memset+0x4>

08003300 <__utoa>:
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	4c1f      	ldr	r4, [pc, #124]	; (8003380 <__utoa+0x80>)
 8003304:	b08b      	sub	sp, #44	; 0x2c
 8003306:	4605      	mov	r5, r0
 8003308:	460b      	mov	r3, r1
 800330a:	466e      	mov	r6, sp
 800330c:	f104 0c20 	add.w	ip, r4, #32
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	6861      	ldr	r1, [r4, #4]
 8003314:	4637      	mov	r7, r6
 8003316:	c703      	stmia	r7!, {r0, r1}
 8003318:	3408      	adds	r4, #8
 800331a:	4564      	cmp	r4, ip
 800331c:	463e      	mov	r6, r7
 800331e:	d1f7      	bne.n	8003310 <__utoa+0x10>
 8003320:	7921      	ldrb	r1, [r4, #4]
 8003322:	7139      	strb	r1, [r7, #4]
 8003324:	1e91      	subs	r1, r2, #2
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	6038      	str	r0, [r7, #0]
 800332a:	2922      	cmp	r1, #34	; 0x22
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	d904      	bls.n	800333c <__utoa+0x3c>
 8003332:	7019      	strb	r1, [r3, #0]
 8003334:	460b      	mov	r3, r1
 8003336:	4618      	mov	r0, r3
 8003338:	b00b      	add	sp, #44	; 0x2c
 800333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333c:	1e58      	subs	r0, r3, #1
 800333e:	4684      	mov	ip, r0
 8003340:	fbb5 f7f2 	udiv	r7, r5, r2
 8003344:	fb02 5617 	mls	r6, r2, r7, r5
 8003348:	3628      	adds	r6, #40	; 0x28
 800334a:	446e      	add	r6, sp
 800334c:	460c      	mov	r4, r1
 800334e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003352:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003356:	462e      	mov	r6, r5
 8003358:	42b2      	cmp	r2, r6
 800335a:	f101 0101 	add.w	r1, r1, #1
 800335e:	463d      	mov	r5, r7
 8003360:	d9ee      	bls.n	8003340 <__utoa+0x40>
 8003362:	2200      	movs	r2, #0
 8003364:	545a      	strb	r2, [r3, r1]
 8003366:	1919      	adds	r1, r3, r4
 8003368:	1aa5      	subs	r5, r4, r2
 800336a:	42aa      	cmp	r2, r5
 800336c:	dae3      	bge.n	8003336 <__utoa+0x36>
 800336e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003372:	780e      	ldrb	r6, [r1, #0]
 8003374:	7006      	strb	r6, [r0, #0]
 8003376:	3201      	adds	r2, #1
 8003378:	f801 5901 	strb.w	r5, [r1], #-1
 800337c:	e7f4      	b.n	8003368 <__utoa+0x68>
 800337e:	bf00      	nop
 8003380:	080048ac 	.word	0x080048ac

08003384 <_init>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	bf00      	nop
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr

08003390 <_fini>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	bf00      	nop
 8003394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	469e      	mov	lr, r3
 800339a:	4770      	bx	lr
